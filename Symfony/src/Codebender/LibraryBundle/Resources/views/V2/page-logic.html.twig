<script type="text/javascript">

    function get_repo_and_meta(isFromRelease)
    {
        isFromRelease = isFromRelease || false;
        $("#newLibMessage").html('<span><i class="fa fa-cog fa-spin"></i></span> Fetching file tree..');
        var $url = $("#githubUrl").val();
        var $ref = isFromRelease ? $("#gitReleases").val() : $("#gitBranches").val();
        $.post( "{{ path('codebender_library_get_repo_tree_meta_v2', {'authorizationKey' : authorizationKey}) }}", { githubUrl: $url, gitRef : $ref })
            .done(function( data ) {
                if(!data.success) {
                    $("#newLibMessage").html('<span><i class="fa fa-times-circle"></i></span> There is no such library');
                    return;
                }

                if (!data.files) {
                    $("#newLibMessage").html('<span><i class="fa fa-times-circle"></i></span> Failed to get the repository file tree. Please try again.');
                    return;
                }

                $("#newLibMessage").html('<span><i class="fa fa-chevron-circle-right"></i></span> Select Directory');
                $('#steps .active').removeClass('active');
                $('.step2').show().addClass('active');

                $('#jstreeDiv').show();

                updateJsTreeData(data.files);

                $('#step1').hide();
                $('#step2').show();
                $('#step3').show();

                if (!data.owner || !data.repo || !data.ref) {
                    $("#newLibMessage").html('<span><i class="fa fa-times-circle"></i></span> Failed to fetch the repository correctly. Please try again.');
                    return;
                }
                update_git(data.owner, data.repo, data.ref, data.description, isFromRelease)
            });
    }

    function updateJsTreeData(data)
    {
        $('#jstreeDiv').jstree(true).settings.core.data = data;
        $('#jstreeDiv').jstree(true).refresh(false, true);
    }

    function get_github_info()
    {
        var $url = $("#githubUrl").val();
        var $github_url_pattern = /^(https?:\/\/)?(www.)?github.com\/[a-zA-Z0-9\.\-_]+\/[a-zA-Z0-9\.\-_]+/;
        if (!$github_url_pattern.test($url)) {
            $("#newLibMessage").html('<span><i class="fa fa-exclamation-triangle"></i></span> Invalid Github Url');
            return;
        }

        $("#newLibMessage").html('<span><i class="fa fa-cog fa-spin"></i></span> Fetching data..');
        $.post( "{{ path('codebender_library_get_library_git_info', {'authorizationKey' : authorizationKey}) }}", { githubUrl: $url })
            .done(function( data ) {
                if(data.success)
                {
                    if (data.branches && data.releases) {
                        $('#fetchFilesBtn').removeAttr('disabled');
                        $('#fetchFilesForReleasesBtn').removeAttr('disabled');

                        if (data.branches.length === 0) {
                            $("#newLibMessage").html('<span><i class="fa fa-exclamation-triangle"></i></span> No branches or releases found');
                            do_step_1();
                            return;
                        }

                        var message = '<span><i class="fa fa-chevron-circle-right"></i></span> Select a branch';

                        $("#container-git-release").hide();
                        if (data.releases.length !== 0) {
                            $("#container-git-release").show();
                            $("#gitReleases").html('');
                            update_git_releases(data.releases);
                            message += ' or a release';
                        }

                        $("#container-git-branchs").show();


                        $("#gitBranches").html('');
                        $("#newLibMessage").html(message);
                        update_git_branches(data.branches);
                    } else {
                        $("#newLibMessage").html('<span><i class="fa fa-meh-o"></i></span> Something went wrong');
                    }
                }
                else
                {
                    $("#newLibMessage").html('<span><i class="fa fa-times-circle"></i></span>' + data.message);
                }
            });
    }

    function update_machineName()
    {
        $("#newLibrary_DefaultHeader").val($("#machineNames").val());
    }

    function update_git(owner, repo, ref, description, isFromRelease)
    {
        $("#newLibrary_GitOwner").val(owner);
        $("#newLibrary_GitRepo").val(repo);
        $("#newLibrary_Description").val(description);
        $("#newLibrary_GitRelease").val('');

        // fill in version data if it's from a release
        if (isFromRelease) {
            var selectedDom = $("#gitReleases").find(':selected');
            $("#newLibrary_Version").val(selectedDom.val());
            $("#newLibrary_VersionDescription").val(selectedDom.text());
            $("#newLibrary_SourceUrl").val(selectedDom.data('source'));
            $("#newLibrary_GitRelease").val(selectedDom.val());
        }
        $("#newLibrary_GitBranch").val(isFromRelease ? selectedDom.data('branch') : ref);
    }

    function update_git_branches(branches)
    {
        var selectDom = $("#gitBranches");
        branches.forEach(function(val) {

            selectDom.append($("<option></option>")
                    .attr("value", val) // use release's tag name as value
                    .text(val));
        });
    }

    function update_git_releases(releases)
    {
        var selectDom = $("#gitReleases");
        releases.forEach(function(val) {

            selectDom.append($("<option></option>")
                    .attr("value", val.tag) // use release's tag name as value
                    .attr("data-branch", val.branch) // save branch info
                    .attr("data-source", val.source) // save source url of this release
                    .text(val.name));
        });
    }

    function endsWith(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }

    function startsWith (str, suffix){
        return str.indexOf(suffix) == 0;
    }

    function onerror(message) {
        alert(message);
    }

    function getZipFiles(file, onend) {
        zip.createReader(new zip.BlobReader(file), function(zipReader) {
            return zipReader.getEntries(onend);
        }, onerror);
    }

    function get_lib_from_zip()
    {
        select_zip();
        getZipFiles($("#newLibrary_Zip")[0].files[0], function(entries) {
            var $el = $("#machineNames");
            $el.empty();
            entries.forEach(function(entry) {

                if(endsWith(entry.filename, ".h") && !startsWith(entry.filename, ".")  && !startsWith(entry.filename, "_") )
                {
                    var $lastSlash = entry.filename.lastIndexOf("/");
                    var $header = entry.filename.substr($lastSlash+1);
                    var $name = $header.substr(0,$header.length -2);
                    $el.append($("<option></option>")
                        .attr("value", $name).text($name));

                }
            });
            $el.prop("selected", false);
            update_machineName();
        });
    }

    function do_step_1()
    {
        $('#steps').find('.active').removeClass('active');
        $('.step1').addClass('active');
        $("#githubUrl, #newLibrary_GitRepo, #newLibrary_GitOwner, #newLibrary_Zip, #newLibrary_GitBranch, #newLibrary_GitPath").removeAttr("disabled");
        $("#orDiv, #gitHubDiv, #zipDiv, #step1").show();
        $("#step2").hide();
        $("#step3").hide();
    }

    function select_zip()
    {
        $("#newLibrary_GitOwner").attr("disabled", "disabled");
        $("#newLibrary_GitRepo").attr("disabled", "disabled");
        $("#newLibrary_GitBranch").attr("disabled", "disabled");
        $("#newLibrary_GitPath").attr("disabled", "disabled");
        $("#newLibrary_GitRelease").val('');
        $("#newLibrary_Zip").removeAttr("disabled");
        $("#newLibrary_Zip").show();
        $("#newLibrary_Url").removeAttr("disabled");
        selectStep(3);
        $('#step3, #step3 #form').show();
    }

    function select_github()
    {
        $("#newLibrary_GitOwner").removeAttr("disabled");
        $("#newLibrary_GitRepo").removeAttr("disabled");
        $("#newLibrary_GitBranch").removeAttr("disabled");
        $("#newLibrary_GitPath").removeAttr("disabled");
        $("#newLibrary_Zip").attr("disabled", "disabled");
        $("#newLibrary_Zip").hide();
        $('#newLibrary_Zip').val('');
        var $url = $("#githubUrl").val();
        $("#newLibrary_Url").val($url);
        $("#zipDiv").hide();
        $("#orDiv").hide();
    }

    function selectStep(step) {
        $('#steps').find('.active').removeClass('active');
        $('.step' + step).addClass('active');

        if (step == 1) {
            do_step_1();
        }

        if (step == 2) {
            $("#orDiv, #gitHubDiv, #zipDiv, #step1").hide();
            $("#step2").show();
            $("#step3").show();
        }

        if (step == 3) {
            $("#orDiv, #gitHubDiv").hide();
            $("#step3").show();
            $("#step2").hide();
        }

    }

    function populate_machine_names_and_update(names)
    {
        var $el = $("#machineNames");
        $el.empty();
        $.each(names, function(k,v){
            $el.append($("<option></option>")
                    .attr("value", v).text(v));
        });
        $el.prop("selected", false);
        update_machineName();
    }

    function update_repo_info_message(path)
    {
        $('#repoInfoOwner').html($("#newLibrary_GitOwner").val());
        $('#repoInfoRepoName').html($("#newLibrary_GitRepo").val());
        $('#repoInfoBranch').html($("#newLibrary_GitBranch").val());
        $('#repoInfoFolder').html(path);
    }

    function handle_tree_selection(data)
    {
        $('#verify').show();
        $('#form').hide();
        // Empty the machine names list
        populate_machine_names_and_update([]);
        if (data.selected.length == 0) {
            update_repo_info_message('None selected');
            return;
        }
        // The currently selected node
        var $libraryNode = data.selected[0];
        // The original metadata added to the node by the backend of the app
        var $nodeMetadata = data.instance.get_node($libraryNode).original;
        if ($nodeMetadata.machineNames) {
            populate_machine_names_and_update($nodeMetadata.machineNames);
        }

        // The full path of the node
        var $nodeFullPath = data.instance.get_path($libraryNode, '/');
        update_repo_info_message($nodeFullPath);

        $("#newLibrary_GitPath").val($nodeFullPath);

    }

    $(document).ready(function()
    {
        $("#newLibMessage").html('<span><i class="fa fa-chevron-circle-right"></i></span> Choose one of the available options');
        // select git branch
        $("#container-git-branchs").hide();
        $('#fetchFilesBtn').click(function(){ get_repo_and_meta(); });

        // select git release
        $("#container-git-release").hide();
        $('#fetchFilesForReleasesBtn').click(function(){ get_repo_and_meta(true); });

        // get info button
        $('#fetchInfoBtn').click(function(){ get_github_info(); });

        $("#newLibrary_Zip").hide();
        $('#takeMeThereButton').click(function(){ $('#step1').hide(); select_zip(); });
        $("#newLibrary_Zip").change(function(){ get_lib_from_zip(); });
        $("#machineNames").change(function(){ update_machineName(); });
        $("#metaDiv").hide();

        $('#steps ol li a').tooltip();

        $("#step3 #verify #yes").click(function(){
            select_github();
            $('#steps').find('.active').removeClass('active');
            $('.step3').addClass('active');
            $('#verify').hide();
            $('#form').show();
        });

        $("#githubUrl").keyup(function() {
            $('#fetchFilesBtn').attr('disabled', 'disabled');
            $('#fetchFilesForReleasesBtn').attr('disabled', 'disabled');
            if ($("#githubUrl").val() != '') {
                $('#orDiv').hide();
                $('#zipDiv').hide();
            } else {
                $("#container-git-branchs").hide();
                $("#container-git-release").hide();
                $('#orDiv').show();
                $('#zipDiv').show();
            }
        });

        /*
        Create a jsTree instance that will later be populated with
        the files and directories found in the repo
         */
        $(function () {
            $('#jstreeDiv')
                .on('changed.jstree', function (e, data) {
                        handle_tree_selection(data);
                    })
                .jstree({
                    'checkbox' : {
                        'whole_node' : false
                    },
                    'plugins' : ["changed", "checkbox"],
                    'core' : {
                        'multiple' : false,
                        'data' : []
                    }
                });
        });

    });

</script>